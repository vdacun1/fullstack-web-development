{
	"info": {
		"_postman_id": "26acb7d0-6d43-4774-b12f-81beb89fb78a",
		"name": "Victor da Cunha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34226717"
	},
	"item": [
		{
			"name": "Poblar base de datos",
			"item": [
				{
					"name": "/toy/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"TOYS\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/toy/list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"toy",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/color/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"COLORS\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/color/list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"color",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/accessory/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"ACCESSORIES\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/accessory/list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"accessory",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let mail = \"\";\r",
									"let password = \"\";\r",
									"\r",
									"function generateRandomString(length) {\r",
									"    let result = '';\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * characters.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"function generateRandomDomain() {\r",
									"    const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com'];\r",
									"    return domains[Math.floor(Math.random() * domains.length)];\r",
									"}\r",
									"\r",
									"function generateRandomEmail() {\r",
									"    const randomString = generateRandomString(10);\r",
									"    const domain = generateRandomDomain();\r",
									"\r",
									"    mail = randomString;\r",
									"    password = randomString;\r",
									"\r",
									"    return `${mail}@${domain}`;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"EMAIL\", generateRandomEmail());\r",
									"pm.collectionVariables.set(\"PASSWORD\", password);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user/register",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "ðŸ”´ SERVICE /user/email_verification_code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"EMAIL_VERIFICATION_CODE\", jsonData.email_verification_code);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{EMAIL}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:32869/user/email_verification_code",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "32869",
							"path": [
								"user",
								"email_verification_code"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user/confirm-email/:verificationCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user/confirm-email/{{EMAIL_VERIFICATION_CODE}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user",
								"confirm-email",
								"{{EMAIL_VERIFICATION_CODE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth/login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"JWT_TOKEN\", jsonData.token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let numberOfToyToCreate = Math.floor(Math.random() * 20);\r",
									"pm.collectionVariables.set(\"NUMBER_OF_TOYS_TO_CREATE\", numberOfToyToCreate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{EMAIL}}\",\r\n  \"password\": \"{{PASSWORD}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/auth/login",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let numberOfToyToCreate = parseInt(pm.collectionVariables.get(\"NUMBER_OF_TOYS_TO_CREATE\"), 10);\r",
									"\r",
									"let counter = parseInt(pm.collectionVariables.get(\"COUNTER /user-toy/create\"), 10);\r",
									"if (!counter) {\r",
									"    counter = 0;\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is one of 201 or 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"counter++;\r",
									"if (counter < numberOfToyToCreate){\r",
									"    pm.collectionVariables.set(\"COUNTER /user-toy/create\", counter);\r",
									"    postman.setNextRequest('/user-toy/create')\r",
									"} else {\r",
									"    pm.collectionVariables.set(\"COUNTER /user-toy/create\", 0);\r",
									"    postman.setNextRequest('/user-toy/list')\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let toys = JSON.parse(pm.collectionVariables.get(\"TOYS\"));\r",
									"let colors = JSON.parse(pm.collectionVariables.get(\"COLORS\"));\r",
									"let accessories = JSON.parse(pm.collectionVariables.get(\"ACCESSORIES\"));\r",
									"\r",
									"function getRandomToy() {\r",
									"    const toy = toys[Math.floor(Math.random() * toys.length)];\r",
									"    return toy.name;\r",
									"}\r",
									"\r",
									"function getRandomColor() {\r",
									"    const color = colors[Math.floor(Math.random() * colors.length)];\r",
									"    return color.name;\r",
									"}\r",
									"\r",
									"function getRandomAccessory() {\r",
									"    const accessory = accessories[Math.floor(Math.random() * accessories.length)];\r",
									"    return accessory.name;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"TOY\", getRandomToy());\r",
									"pm.collectionVariables.set(\"COLOR\", getRandomColor());\r",
									"pm.collectionVariables.set(\"ACCESSORY\", getRandomAccessory());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"toy\": \"{{TOY}}\",\r\n  \"color\": \"{{COLOR}}\",\r\n  \"accessory\": \"{{ACCESSORY}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-toy/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let id = jsonData[0]._id;\r",
									"let toy = jsonData[0].toy;\r",
									"let color = jsonData[0].color;\r",
									"let accessory = jsonData[0].accessory;\r",
									"\r",
									"pm.collectionVariables.set(\"ID_TO_DELETE\", id);\r",
									"pm.collectionVariables.set(\"TOY_TO_DELETE\", toy);\r",
									"pm.collectionVariables.set(\"COLOR_TO_DELETE\", color);\r",
									"pm.collectionVariables.set(\"ACCESSORY_TO_DELETE\", accessory);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/user-toy/list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/create for decrement and delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"toy\": \"{{TOY_TO_DELETE}}\",\r\n  \"color\": \"{{COLOR_TO_DELETE}}\",\r\n  \"accessory\": \"{{ACCESSORY_TO_DELETE}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-toy/create",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/delete/:id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is one of 204 or 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
									"});\r",
									"\r",
									"let status = pm.response.code;\r",
									"if (status === 200) {\r",
									"    postman.setNextRequest('/user-toy/delete/:id')\r",
									"} else {\r",
									"    postman.setNextRequest('/user-toy/delete/:id NOT FOUND')\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let toys = JSON.parse(pm.collectionVariables.get(\"TOYS\"));\r",
									"let colors = JSON.parse(pm.collectionVariables.get(\"COLORS\"));\r",
									"let accessories = JSON.parse(pm.collectionVariables.get(\"ACCESSORIES\"));\r",
									"\r",
									"function getRandomToy() {\r",
									"    const toy = toys[Math.floor(Math.random() * toys.length)];\r",
									"    return toy.name;\r",
									"}\r",
									"\r",
									"function getRandomColor() {\r",
									"    const color = colors[Math.floor(Math.random() * colors.length)];\r",
									"    return color.name;\r",
									"}\r",
									"\r",
									"function getRandomAccessory() {\r",
									"    const accessory = accessories[Math.floor(Math.random() * accessories.length)];\r",
									"    return accessory.name;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"TOY\", getRandomToy());\r",
									"pm.collectionVariables.set(\"COLOR\", getRandomColor());\r",
									"pm.collectionVariables.set(\"ACCESSORY\", getRandomAccessory());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-toy/delete/{{ID_TO_DELETE}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"delete",
								"{{ID_TO_DELETE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/delete/:id NOT FOUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let toys = JSON.parse(pm.collectionVariables.get(\"TOYS\"));\r",
									"let colors = JSON.parse(pm.collectionVariables.get(\"COLORS\"));\r",
									"let accessories = JSON.parse(pm.collectionVariables.get(\"ACCESSORIES\"));\r",
									"\r",
									"function getRandomToy() {\r",
									"    const toy = toys[Math.floor(Math.random() * toys.length)];\r",
									"    return toy.name;\r",
									"}\r",
									"\r",
									"function getRandomColor() {\r",
									"    const color = colors[Math.floor(Math.random() * colors.length)];\r",
									"    return color.name;\r",
									"}\r",
									"\r",
									"function getRandomAccessory() {\r",
									"    const accessory = accessories[Math.floor(Math.random() * accessories.length)];\r",
									"    return accessory.name;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"TOY\", getRandomToy());\r",
									"pm.collectionVariables.set(\"COLOR\", getRandomColor());\r",
									"pm.collectionVariables.set(\"ACCESSORY\", getRandomAccessory());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/user-toy/delete/{{ID_TO_DELETE}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"delete",
								"{{ID_TO_DELETE}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "/user-toy/ranking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/user-toy/ranking",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"user-toy",
								"ranking"
							]
						}
					},
					"response": []
				}
			],
			"description": "# Como ejecutar los tests para poblar la base de datos\n\n## Paso 1) Poner a correr el servidor\n\nSeguir los pases del `README` del proyecto backend para poner en ejecuciÃ³n la aplicaciÃ³n.\n\nAdemÃ¡s, ejecutar el servicio auxiliar `e2e-service`. Este servicio que **NO es productivo** permite acceder a los cÃ³digos de confirmaciÃ³n de email, y asÃ­ ejecutar todos los endpoints de la aplicaciÃ³n productiva de forma satisfactoria.\n\n## Paso 2) PreparaciÃ³n de pruebas\n\nHacer click derecho sobre la carpeta de postman `Poblar base de datos` y luego hacer click en `Run folder` (observar Figura 1)\n\n<img src=\"https://content.pstmn.io/b7d9fdf9-4bff-41ee-b191-88bb91de1b91/aW1hZ2UucG5n\" alt=\"Figura%201:%20Run%20folder\">\n\n## Paso 3) ConfiguraciÃ³n de pruebas\n\nPostman nos permite ejecutar `N` veces las pruebas (observar Figura 2, campo iterations), esto se utilizarÃ¡ como herramienta para poblar la base de datos de usuarios, y peluches asociados a esos usuarios. AdemÃ¡s de que probarÃ¡ cada uno de los endpoints disponibles de la aplicaciÃ³n, y todas las funcionalidades de la misma.\n\n<img src=\"https://content.pstmn.io/495f5ea6-8553-4e1a-86cc-31495c47ba8e/aW1hZ2UucG5n\" alt=\"Figura%202:%20Iterations\" width=\"1945\" height=\"974\">\n\nAl campo iterations le setearemos la cantidad de usuarios que queremos crear. Estos se crearÃ¡n de forma automÃ¡tica. No obstante, si queremos crear un usuario con mail propio especÃ­fico podemos hacerlo de forma manual utilizando los mismos endpoints de la prueba. Y cambiando el uso de variables por los valores que se requieran.\n\n## Paso 4) Poner a correr\n\nUna vez seteado el valor de iterations, hacer click en `Run Victor da Cunha`. Esperar a finalizar.\n\nÂ¡Listo! Ya tenemos la base de datos de datos para testear la aplicaciÃ³n\n\n## Precauciones\n\nSi se requiere una enorme cantidad de usuarios (>100), se recomienda el uso de la funcionalidad `Performance` de Postman. Esta funcionalidad realiza un test de estrÃ©s a la aplicaciÃ³n, y se puede dejar corriendo durante un tiempo determinado. Lo mÃ¡s importante es que exigirÃ¡ menos recursos de la computadora ya que no se loggean los resultados en consola, sino que simplemente se muestra un grÃ¡fico de fallos vs resultados satsifactorios."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "TOYS",
			"value": ""
		},
		{
			"key": "COLORS",
			"value": ""
		},
		{
			"key": "ACCESSORIES",
			"value": ""
		},
		{
			"key": "EMAIL",
			"value": "",
			"type": "string"
		},
		{
			"key": "PASSWORD",
			"value": ""
		},
		{
			"key": "JWT_TOKEN",
			"value": ""
		},
		{
			"key": "TOY",
			"value": ""
		},
		{
			"key": "COLOR",
			"value": ""
		},
		{
			"key": "ACCESSORY",
			"value": ""
		},
		{
			"key": "COUNTER /user-toy/create",
			"value": "0"
		},
		{
			"key": "NUMBER_OF_TOYS_TO_CREATE",
			"value": "0"
		},
		{
			"key": "EMAIL_VERIFICATION_CODE",
			"value": ""
		},
		{
			"key": "ID_TO_DELETE",
			"value": ""
		},
		{
			"key": "TOY_TO_DELETE",
			"value": ""
		},
		{
			"key": "COLOR_TO_DELETE",
			"value": ""
		},
		{
			"key": "ACCESSORY_TO_DELETE",
			"value": ""
		}
	]
}